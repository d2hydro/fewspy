{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fewspy A Python API for the Deltares FEWS PI REST Web Service . Fewspy is build for speed; time-series requests are handled asynchronous, giving the results you need much faster. Documentation : https://d2hydro.github.io/fewspy Source Code : https://github.com/d2hydro/fewspy Installation Fewspy can be installed with pip in any environment with the following Python-packages properly installed: requests aiohttp pandas geopandas In that activated environment you can add fewspy via pip by: pip install fewspy We recommend to build your environment using Anaconda . You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line: conda env create -f environment.yml About Fewspy is developed and maintained by D2Hydro and freely available under an Open Source MIT license .","title":"Home"},{"location":"#fewspy","text":"A Python API for the Deltares FEWS PI REST Web Service . Fewspy is build for speed; time-series requests are handled asynchronous, giving the results you need much faster. Documentation : https://d2hydro.github.io/fewspy Source Code : https://github.com/d2hydro/fewspy","title":"Fewspy"},{"location":"#installation","text":"Fewspy can be installed with pip in any environment with the following Python-packages properly installed: requests aiohttp pandas geopandas In that activated environment you can add fewspy via pip by: pip install fewspy We recommend to build your environment using Anaconda . You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line: conda env create -f environment.yml","title":"Installation"},{"location":"#about","text":"Fewspy is developed and maintained by D2Hydro and freely available under an Open Source MIT license .","title":"About"},{"location":"manuals/contribute/","text":"Contribute In the remainder of this manual we assume you: have your own GitHub account work with GitHub Desktop or Git can work with GeoPandas and Pytest Code-contributions can enter the main branch if: they are provided with docstring documentation are passing Flakes tests an Black styling are covered Pytest Installation for development To setup your development environment follow the instructions at Installation for development Small contributions For small contributions we propose the following workflow: Fork and clone and install a copy Add and test new code Commit your copy and request a merge The remainder of this guide explains how to do it. Fork repo Fork the respository to your own GitHub account: Click fork in the upper-right of the rository. Select your own github account The repository is now available on your own github account. Clone repo Now clone your fork to your local drive. We do this with GitHub Desktop . After installation and authentication you can get a local copy by: Add and Clone repository... in the top-left corner Find your fork and clone it to an empty directory on your local drive Press clone` Verify if the repository is on your local drive. Install copy Install the module in the activated validatietool environment in develop-mode: pip install -e . Now you're good to go! Improve code Make any code-contribution you deem necessary. Please don't forget to document your code with docstrings so they are documented. Test code In the test-folder you add a test. A test-function starts with test_ . In within the test-function you confirm if your new functionity is correct with assert = True . In this case Within your activated environment you can test your function with pytest: pytest --cov-report term-missing --cov=src tests/ As your function is correct, the test should not fail. You can confirm all lines of your new code are tested: Contribute Now you can contribute by: 1. Committing your code in your own repository 2. Request a merge of your branch into the main branch of fewspy Large contributions For significant contributions we are happy to consider adding you to the contributors of our repository!","title":"Contribute"},{"location":"manuals/contribute/#contribute","text":"In the remainder of this manual we assume you: have your own GitHub account work with GitHub Desktop or Git can work with GeoPandas and Pytest Code-contributions can enter the main branch if: they are provided with docstring documentation are passing Flakes tests an Black styling are covered Pytest","title":"Contribute"},{"location":"manuals/contribute/#installation-for-development","text":"To setup your development environment follow the instructions at Installation for development","title":"Installation for development"},{"location":"manuals/contribute/#small-contributions","text":"For small contributions we propose the following workflow: Fork and clone and install a copy Add and test new code Commit your copy and request a merge The remainder of this guide explains how to do it.","title":"Small contributions"},{"location":"manuals/contribute/#fork-repo","text":"Fork the respository to your own GitHub account: Click fork in the upper-right of the rository. Select your own github account The repository is now available on your own github account.","title":"Fork repo"},{"location":"manuals/contribute/#clone-repo","text":"Now clone your fork to your local drive. We do this with GitHub Desktop . After installation and authentication you can get a local copy by: Add and Clone repository... in the top-left corner Find your fork and clone it to an empty directory on your local drive Press clone` Verify if the repository is on your local drive.","title":"Clone repo"},{"location":"manuals/contribute/#install-copy","text":"Install the module in the activated validatietool environment in develop-mode: pip install -e . Now you're good to go!","title":"Install copy"},{"location":"manuals/contribute/#improve-code","text":"Make any code-contribution you deem necessary. Please don't forget to document your code with docstrings so they are documented.","title":"Improve code"},{"location":"manuals/contribute/#test-code","text":"In the test-folder you add a test. A test-function starts with test_ . In within the test-function you confirm if your new functionity is correct with assert = True . In this case Within your activated environment you can test your function with pytest: pytest --cov-report term-missing --cov=src tests/ As your function is correct, the test should not fail. You can confirm all lines of your new code are tested:","title":"Test code"},{"location":"manuals/contribute/#contribute_1","text":"Now you can contribute by: 1. Committing your code in your own repository 2. Request a merge of your branch into the main branch of fewspy","title":"Contribute"},{"location":"manuals/contribute/#large-contributions","text":"For significant contributions we are happy to consider adding you to the contributors of our repository!","title":"Large contributions"},{"location":"manuals/installation/","text":"Installation Installation for regular use Fewspy can be installed with pip in any environment with the following Python-packages properly installed: requests aiohttp pandas geopandas In that activated environment you can add fewspy via pip by: pip install fewspy We recommend to build your environment using Anaconda . You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line: conda env create -f environment.yml Installation for development For development we recommend the following approach: Make sure you have git Git installed. Make sure you have a copy of Anaconda or Miniconda installed. Clone the fewspy , e.g. via GIT: git clone https://github.com/d2hydro/fewspy.git Make sure you have the fewspy development environment installed, using the environment_dev.yml . By e.g. Anaconda: conda env create -f environment_dev.yml Activate the environment in the Command Prompt (or Anaconda Prompt) by: conda activate fewspy Now cd to the clone on your disk and install fewspy in dev-mode (so with -e ): cd path\\to\\fewspy pip install -e .","title":"Installation"},{"location":"manuals/installation/#installation","text":"","title":"Installation"},{"location":"manuals/installation/#installation-for-regular-use","text":"Fewspy can be installed with pip in any environment with the following Python-packages properly installed: requests aiohttp pandas geopandas In that activated environment you can add fewspy via pip by: pip install fewspy We recommend to build your environment using Anaconda . You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line: conda env create -f environment.yml","title":"Installation for regular use"},{"location":"reference/api/","text":"DataSets Python API for the Deltares FEWS PI REST Web Service. For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service Source code in src\\fewspy\\api.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class Api : \"\"\" Python API for the Deltares FEWS PI REST Web Service. For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service \"\"\" def __init__ ( self , url , logger = LOGGER , ssl_verify = False ): self . document_format = \"PI_JSON\" self . url = url self . logger = logger self . timer = Timer ( logger ) self . ssl_verify = ssl_verify def __kwargs ( self , url_post_fix : str , kwargs : dict ) -> dict : kwargs = { ** kwargs , ** dict ( url = f \" { self . url }{ url_post_fix } \" , document_format = self . document_format , verify = self . ssl_verify , logger = self . logger , ), } kwargs . pop ( \"self\" ) kwargs . pop ( \"parallel\" , None ) return kwargs def get_parameters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result def get_filters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result def get_locations ( self , filter_id = None , attributes = []): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result get_filters ( filter_id = None ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def get_filters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result get_locations ( filter_id = None , attributes = []) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None attributes list if not emtpy, the location attributes to include as columns in the pandas DataFrame. [] Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_locations ( self , filter_id = None , attributes = []): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result get_parameters ( filter_id = None ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default filter_id str the FEWS id of the filter to pass as request parameter None Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_parameters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result get_qualifiers () Get FEWS qualifiers as Pandas DataFrame Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 111 112 113 114 115 116 117 118 119 120 121 122 def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result get_time_series ( filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None only_headers bool if True, only headers will be returned. Defaults to False. False show_statistics bool if True, time series statistics will be included in header. Defaults to False. False parallel bool if True, timeseries are requested by the asynchronous wrapper. Defaults to False False Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result","title":"Api"},{"location":"reference/api/#datasets","text":"Python API for the Deltares FEWS PI REST Web Service. For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service Source code in src\\fewspy\\api.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 class Api : \"\"\" Python API for the Deltares FEWS PI REST Web Service. For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service \"\"\" def __init__ ( self , url , logger = LOGGER , ssl_verify = False ): self . document_format = \"PI_JSON\" self . url = url self . logger = logger self . timer = Timer ( logger ) self . ssl_verify = ssl_verify def __kwargs ( self , url_post_fix : str , kwargs : dict ) -> dict : kwargs = { ** kwargs , ** dict ( url = f \" { self . url }{ url_post_fix } \" , document_format = self . document_format , verify = self . ssl_verify , logger = self . logger , ), } kwargs . pop ( \"self\" ) kwargs . pop ( \"parallel\" , None ) return kwargs def get_parameters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result def get_filters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result def get_locations ( self , filter_id = None , attributes = []): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result","title":"DataSets"},{"location":"reference/api/#src.fewspy.api.Api.get_filters","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def get_filters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result","title":"get_filters()"},{"location":"reference/api/#src.fewspy.api.Api.get_locations","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None attributes list if not emtpy, the location attributes to include as columns in the pandas DataFrame. [] Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def get_locations ( self , filter_id = None , attributes = []): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result","title":"get_locations()"},{"location":"reference/api/#src.fewspy.api.Api.get_parameters","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default filter_id str the FEWS id of the filter to pass as request parameter None Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 def get_parameters ( self , filter_id = None ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result","title":"get_parameters()"},{"location":"reference/api/#src.fewspy.api.Api.get_qualifiers","text":"Get FEWS qualifiers as Pandas DataFrame Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 111 112 113 114 115 116 117 118 119 120 121 122 def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result","title":"get_qualifiers()"},{"location":"reference/api/#src.fewspy.api.Api.get_time_series","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None only_headers bool if True, only headers will be returned. Defaults to False. False show_statistics bool if True, time series statistics will be included in header. Defaults to False. False parallel bool if True, timeseries are requested by the asynchronous wrapper. Defaults to False False Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result","title":"get_time_series()"},{"location":"reference/wrappers/","text":"Python wrappers for the Deltares FEWS PI REST Web Service get_filters ( url , filter_id = None , document_format = 'PI_JSON' , verify = False , logger = LOGGER ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns List [ dict ] \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_filters.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def get_filters ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> List [ dict ]: \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Filters request\" ) # parse the response result = [] if response . status_code == 200 : if \"filters\" in response . json () . keys (): result = response . json ()[ \"filters\" ] timer . report ( \"Filters parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) return result get_locations ( url , filter_id = None , document_format = 'PI_JSON' , attributes = [], verify = False , logger = LOGGER ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' attributes list if not emtpy, the location attributes to include as columns in the pandas DataFrame. [] verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By default, a logger will ge created. LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_locations.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_locations ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , attributes : list = [], verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Locations request\" ) # parse the response if response . status_code == 200 : # convert to gdf and snake_case gdf = gpd . GeoDataFrame ( response . json ()[ \"locations\" ]) gdf . columns = [ camel_to_snake_case ( i ) for i in gdf . columns ] gdf . set_index ( \"location_id\" , inplace = True ) # handle geometry and crs gdf [ \"geometry\" ] = xy_array_to_point ( gdf [[ \"x\" , \"y\" ]] . values ) gdf . crs = geo_datum_to_crs ( response . json ()[ \"geoDatum\" ]) # handle attributes if attributes : gdf . loc [:, attributes ] = attributes_to_array ( gdf [ \"attributes\" ] . values , attributes ) gdf . drop ( columns = [ \"attributes\" ], inplace = True ) timer . report ( \"Locations parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) gdf = gpd . GeoDataFrame () return gdf get_parameters ( url , filter_id = None , document_format = 'PI_JSON' , verify = False , logger = LOGGER ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns List [ dict ] \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_parameters.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def get_parameters ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> List [ dict ]: \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Parameters request\" ) # parse the response df = pd . DataFrame ( columns = COLUMNS ) if response . status_code == 200 : if \"timeSeriesParameters\" in response . json () . keys (): df = pd . DataFrame ( response . json ()[ \"timeSeriesParameters\" ]) df . columns = [ camel_to_snake_case ( i ) for i in df . columns ] df [ \"uses_datum\" ] = df [ \"uses_datum\" ] == \"true\" else : logger . error ( f \"FEWS Server responds { response . text } \" ) df . set_index ( \"id\" , inplace = True ) return df get_qualifiers ( url , verify = False , logger = LOGGER ) Get FEWS qualifiers as Pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_qualifiers.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get_qualifiers ( url : str , verify : bool = False , logger = LOGGER ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a new logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) response = requests . get ( url , verify = False ) timer . report ( \"Qualifiers request\" ) logger . debug ( response . url ) # parse the response if response . status_code == 200 : tree = ElementTree . fromstring ( response . content ) qualifiers_tree = [ i for i in tree . iter ( tag = f \" { NS } qualifier\" )] qualifiers_tuple = ( _element_to_tuple ( i ) for i in qualifiers_tree ) df = pd . DataFrame ( qualifiers_tuple , columns = COLUMNS ) timer . report ( \"Qualifiers parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) df = pd . DataFrame ( columns = COLUMNS ) df . set_index ( \"id\" , inplace = True ) return df get_time_series ( url , filter_id , location_ids = None , parameter_ids = None , qualifier_ids = None , start_time = None , end_time = None , thinning = None , only_headers = False , show_statistics = False , document_format = 'PI_JSON' , verify = False , logger = LOGGER ) Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None only_headers bool if True, only headers will be returned. Defaults to False. False show_statistics bool if True, time series statistics will be included in header. Defaults to False. False document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_time_series.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get_time_series ( url : str , filter_id : str , location_ids : Union [ str , List [ str ]] = None , parameter_ids : Union [ str , List [ str ]] = None , qualifier_ids : Union [ str , List [ str ]] = None , start_time : datetime = None , end_time : datetime = None , thinning : int = None , only_headers : bool = False , show_statistics : bool = False , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" report_string = _ts_or_headers ( only_headers ) # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( report_string . format ( status = \"request\" )) # parse the response if response . ok : pi_time_series = response . json () time_series_set = TimeSeriesSet . from_pi_time_series ( pi_time_series ) timer . report ( report_string . format ( status = \"parsed\" )) else : logger . error ( f \"FEWS Server responds { response . text } \" ) time_series_set = TimeSeriesSet () return time_series_set get_time_series_async ( url , filter_id , location_ids = None , parameter_ids = None , qualifier_ids = None , start_time = None , end_time = None , thinning = None , document_format = 'PI_JSON' , verify = False , logger = LOGGER ) Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_time_series_async.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_time_series_async ( url : str , filter_id : str , location_ids : Union [ str , List [ str ]] = None , parameter_ids : Union [ str , List [ str ]] = None , qualifier_ids : Union [ str , List [ str ]] = None , start_time : datetime = None , end_time : datetime = None , thinning : int = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" parameters = parameters_to_fews ( locals ()) def _get_loop (): try : loop = asyncio . get_event_loop () except RuntimeError : loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) finally : loop . set_debug ( True ) return loop async def get_timeseries_async ( location_id , parameter_id , session ): \"\"\"Get timerseries using FEWS (asynchronously)\"\"\" parameters [ \"locationIds\" ] = [ location_id ] parameters [ \"parameterIds\" ] = [ parameter_id ] try : response = await session . request ( method = \"GET\" , url = url , params = parameters , verify_ssl = verify ) # print(response.url) response . raise_for_status () except Exception as err : # print(f\"An error ocurred: {err}\") response = None response_json = await response . json () return response_json async def run_program ( location_id , parameter_id , session ): \"\"\"Wrapper for running program in an asynchronous manner\"\"\" try : response = await get_timeseries_async ( location_id , parameter_id , session ) # print(f\"{len(response.get('timeSeries'))}\") except Exception as err : # print(f\"Exception occured: {err}\") response = None pass return response async def asynciee (): async with aiohttp . ClientSession ( loop = loop ) as session : print ( \"fetching async\" ) fetch_all = [ run_program ( location_id , parameter_id , session ) for location_id in location_ids for parameter_id in parameter_ids ] result_async = await asyncio . gather ( * fetch_all ) return result_async if __name__ == \"fewspy.wrappers.get_time_series_async\" : print ( \"name=\" , __name__ ) loop = _get_loop () result_async = loop . run_until_complete ( asynciee ()) time_series_set = __result_async_to_time_series_set ( result_async ) return time_series_set","title":"Wrappers"},{"location":"reference/wrappers/#python-wrappers-for-the-deltares-fews-pi-rest-web-service","text":"","title":"Python wrappers for the Deltares FEWS PI REST Web Service"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_filters.get_filters","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns List [ dict ] \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_filters.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def get_filters ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> List [ dict ]: \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Filters request\" ) # parse the response result = [] if response . status_code == 200 : if \"filters\" in response . json () . keys (): result = response . json ()[ \"filters\" ] timer . report ( \"Filters parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) return result","title":"get_filters()"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_locations.get_locations","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' attributes list if not emtpy, the location attributes to include as columns in the pandas DataFrame. [] verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By default, a logger will ge created. LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_locations.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get_locations ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , attributes : list = [], verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Locations request\" ) # parse the response if response . status_code == 200 : # convert to gdf and snake_case gdf = gpd . GeoDataFrame ( response . json ()[ \"locations\" ]) gdf . columns = [ camel_to_snake_case ( i ) for i in gdf . columns ] gdf . set_index ( \"location_id\" , inplace = True ) # handle geometry and crs gdf [ \"geometry\" ] = xy_array_to_point ( gdf [[ \"x\" , \"y\" ]] . values ) gdf . crs = geo_datum_to_crs ( response . json ()[ \"geoDatum\" ]) # handle attributes if attributes : gdf . loc [:, attributes ] = attributes_to_array ( gdf [ \"attributes\" ] . values , attributes ) gdf . drop ( columns = [ \"attributes\" ], inplace = True ) timer . report ( \"Locations parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) gdf = gpd . GeoDataFrame () return gdf","title":"get_locations()"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_parameters.get_parameters","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns List [ dict ] \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_parameters.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 def get_parameters ( url : str , filter_id : str = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> List [ dict ]: \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( \"Parameters request\" ) # parse the response df = pd . DataFrame ( columns = COLUMNS ) if response . status_code == 200 : if \"timeSeriesParameters\" in response . json () . keys (): df = pd . DataFrame ( response . json ()[ \"timeSeriesParameters\" ]) df . columns = [ camel_to_snake_case ( i ) for i in df . columns ] df [ \"uses_datum\" ] = df [ \"uses_datum\" ] == \"true\" else : logger . error ( f \"FEWS Server responds { response . text } \" ) df . set_index ( \"id\" , inplace = True ) return df","title":"get_parameters()"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_qualifiers.get_qualifiers","text":"Get FEWS qualifiers as Pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_qualifiers.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get_qualifiers ( url : str , verify : bool = False , logger = LOGGER ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a new logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" # do the request timer = Timer ( logger ) response = requests . get ( url , verify = False ) timer . report ( \"Qualifiers request\" ) logger . debug ( response . url ) # parse the response if response . status_code == 200 : tree = ElementTree . fromstring ( response . content ) qualifiers_tree = [ i for i in tree . iter ( tag = f \" { NS } qualifier\" )] qualifiers_tuple = ( _element_to_tuple ( i ) for i in qualifiers_tree ) df = pd . DataFrame ( qualifiers_tuple , columns = COLUMNS ) timer . report ( \"Qualifiers parsed\" ) else : logger . error ( f \"FEWS Server responds { response . text } \" ) df = pd . DataFrame ( columns = COLUMNS ) df . set_index ( \"id\" , inplace = True ) return df","title":"get_qualifiers()"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_time_series.get_time_series","text":"Get FEWS qualifiers as a pandas DataFrame Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None only_headers bool if True, only headers will be returned. Defaults to False. False show_statistics bool if True, time series statistics will be included in header. Defaults to False. False document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_time_series.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def get_time_series ( url : str , filter_id : str , location_ids : Union [ str , List [ str ]] = None , parameter_ids : Union [ str , List [ str ]] = None , qualifier_ids : Union [ str , List [ str ]] = None , start_time : datetime = None , end_time : datetime = None , thinning : int = None , only_headers : bool = False , show_statistics : bool = False , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as a pandas DataFrame Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. only_headers (bool): if True, only headers will be returned. Defaults to False. show_statistics (bool): if True, time series statistics will be included in header. Defaults to False. document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" report_string = _ts_or_headers ( only_headers ) # do the request timer = Timer ( logger ) parameters = parameters_to_fews ( locals ()) response = requests . get ( url , parameters , verify = verify ) timer . report ( report_string . format ( status = \"request\" )) # parse the response if response . ok : pi_time_series = response . json () time_series_set = TimeSeriesSet . from_pi_time_series ( pi_time_series ) timer . report ( report_string . format ( status = \"parsed\" )) else : logger . error ( f \"FEWS Server responds { response . text } \" ) time_series_set = TimeSeriesSet () return time_series_set","title":"get_time_series()"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_time_series_async.get_time_series_async","text":"Parameters: Name Type Description Default url str url Delft-FEWS PI REST WebService. required E.g. http //localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers required filter_id str the FEWS id of the filter to pass as request parameter required location_ids list list with FEWS location ids to extract timeseries from. Defaults to None. None parameter_ids list list with FEWS parameter ids to extract timeseries from. Defaults to None. None qualifier_ids list list with FEWS qualifier ids to extract timeseries from. Defaults to None. None start_time datetime . datetime datetime-object with start datetime to use in request. Defaults to None. None end_time datetime . datetime datetime-object with end datetime to use in request. Defaults to None. None thinning int integer value for thinning parameter to use in request. Defaults to None. None document_format str request document format to return. Defaults to PI_JSON. 'PI_JSON' verify bool passed to requests.get verify parameter. False logger logging . Logger Logger to pass logging to. By LOGGER Returns: Name Type Description df pandas . DataFrame Pandas dataframe with index \"id\" and columns pd . DataFrame \"name\" and \"group_id\". Source code in src\\fewspy\\wrappers\\get_time_series_async.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 def get_time_series_async ( url : str , filter_id : str , location_ids : Union [ str , List [ str ]] = None , parameter_ids : Union [ str , List [ str ]] = None , qualifier_ids : Union [ str , List [ str ]] = None , start_time : datetime = None , end_time : datetime = None , thinning : int = None , document_format : str = \"PI_JSON\" , verify : bool = False , logger = LOGGER , ) -> pd . DataFrame : \"\"\" Args: url (str): url Delft-FEWS PI REST WebService. E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers filter_id (str): the FEWS id of the filter to pass as request parameter location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None. parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None. qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None. start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None. end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None. thinning (int): integer value for thinning parameter to use in request. Defaults to None. document_format (str): request document format to return. Defaults to PI_JSON. verify (bool, optional): passed to requests.get verify parameter. Defaults to False. logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created. Returns: df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns \"name\" and \"group_id\". \"\"\" parameters = parameters_to_fews ( locals ()) def _get_loop (): try : loop = asyncio . get_event_loop () except RuntimeError : loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) finally : loop . set_debug ( True ) return loop async def get_timeseries_async ( location_id , parameter_id , session ): \"\"\"Get timerseries using FEWS (asynchronously)\"\"\" parameters [ \"locationIds\" ] = [ location_id ] parameters [ \"parameterIds\" ] = [ parameter_id ] try : response = await session . request ( method = \"GET\" , url = url , params = parameters , verify_ssl = verify ) # print(response.url) response . raise_for_status () except Exception as err : # print(f\"An error ocurred: {err}\") response = None response_json = await response . json () return response_json async def run_program ( location_id , parameter_id , session ): \"\"\"Wrapper for running program in an asynchronous manner\"\"\" try : response = await get_timeseries_async ( location_id , parameter_id , session ) # print(f\"{len(response.get('timeSeries'))}\") except Exception as err : # print(f\"Exception occured: {err}\") response = None pass return response async def asynciee (): async with aiohttp . ClientSession ( loop = loop ) as session : print ( \"fetching async\" ) fetch_all = [ run_program ( location_id , parameter_id , session ) for location_id in location_ids for parameter_id in parameter_ids ] result_async = await asyncio . gather ( * fetch_all ) return result_async if __name__ == \"fewspy.wrappers.get_time_series_async\" : print ( \"name=\" , __name__ ) loop = _get_loop () result_async = loop . run_until_complete ( asynciee ()) time_series_set = __result_async_to_time_series_set ( result_async ) return time_series_set","title":"get_time_series_async()"}]}