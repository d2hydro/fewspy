{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome fewspy fewspy is a Python API for the Deltares FEWS PI REST Web Service","title":"Home"},{"location":"#welcome-fewspy","text":"fewspy is a Python API for the Deltares FEWS PI REST Web Service","title":"Welcome fewspy"},{"location":"reference/api/","text":"DataSets FEWS PI-REST api it needs an server url and a logger. All variables related to PI-REST variables are defined camelCase. All others are snake_case. Source code in src\\fewspy\\api.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Api : \"\"\" FEWS PI-REST api it needs an server url and a logger. All variables related to PI-REST variables are defined camelCase. All others are snake_case. \"\"\" def __init__ ( self , url , logger = LOGGER , ssl_verify = False ): self . document_format = \"PI_JSON\" self . url = url self . logger = logger self . timer = Timer ( logger ) self . ssl_verify = ssl_verify def __kwargs ( self , url_post_fix : str , kwargs : dict ) -> dict : kwargs = { ** kwargs , ** dict ( url = f \" { self . url }{ url_post_fix } \" , document_format = self . document_format , verify = self . ssl_verify , logger = self . logger , ), } kwargs . pop ( \"self\" ) kwargs . pop ( \"parallel\" , None ) return kwargs def get_parameters ( self , filter_id = None ): kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result def get_filters ( self , filter_id = None ): \"\"\"Get filters as dictionary, or sub-filters if a filter_id is specified.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result def get_locations ( self , filter_id = None , attributes = []): \"\"\"Get location en return as a GeoDataFrame.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: result (pandas.DataFrame): Pandas DataFrame with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result get_filters ( filter_id = None ) Get filters as dictionary, or sub-filters if a filter_id is specified. Source code in src\\fewspy\\api.py 61 62 63 64 65 66 67 def get_filters ( self , filter_id = None ): \"\"\"Get filters as dictionary, or sub-filters if a filter_id is specified.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result get_locations ( filter_id = None , attributes = []) Get location en return as a GeoDataFrame. Source code in src\\fewspy\\api.py 69 70 71 72 73 74 75 def get_locations ( self , filter_id = None , attributes = []): \"\"\"Get location en return as a GeoDataFrame.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result get_qualifiers () Get FEWS qualifiers as Pandas DataFrame Returns: Name Type Description result pandas . DataFrame Pandas DataFrame with index \"id\" and pd . DataFrame columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 77 78 79 80 81 82 83 84 85 86 87 88 def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: result (pandas.DataFrame): Pandas DataFrame with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result","title":"Api"},{"location":"reference/api/#datasets","text":"FEWS PI-REST api it needs an server url and a logger. All variables related to PI-REST variables are defined camelCase. All others are snake_case. Source code in src\\fewspy\\api.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Api : \"\"\" FEWS PI-REST api it needs an server url and a logger. All variables related to PI-REST variables are defined camelCase. All others are snake_case. \"\"\" def __init__ ( self , url , logger = LOGGER , ssl_verify = False ): self . document_format = \"PI_JSON\" self . url = url self . logger = logger self . timer = Timer ( logger ) self . ssl_verify = ssl_verify def __kwargs ( self , url_post_fix : str , kwargs : dict ) -> dict : kwargs = { ** kwargs , ** dict ( url = f \" { self . url }{ url_post_fix } \" , document_format = self . document_format , verify = self . ssl_verify , logger = self . logger , ), } kwargs . pop ( \"self\" ) kwargs . pop ( \"parallel\" , None ) return kwargs def get_parameters ( self , filter_id = None ): kwargs = self . __kwargs ( url_post_fix = \"parameters\" , kwargs = locals ()) result = get_parameters ( ** kwargs ) return result def get_filters ( self , filter_id = None ): \"\"\"Get filters as dictionary, or sub-filters if a filter_id is specified.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result def get_locations ( self , filter_id = None , attributes = []): \"\"\"Get location en return as a GeoDataFrame.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: result (pandas.DataFrame): Pandas DataFrame with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result def get_time_series ( self , filter_id , location_ids = None , start_time = None , end_time = None , parameter_ids = None , qualifier_ids = None , thinning = None , only_headers = False , show_statistics = False , parallel = False , ): kwargs = self . __kwargs ( url_post_fix = \"timeseries\" , kwargs = locals ()) if parallel : kwargs . pop ( \"only_headers\" ) kwargs . pop ( \"show_statistics\" ) result = get_time_series_async ( ** kwargs ) else : result = get_time_series ( ** kwargs ) return result","title":"DataSets"},{"location":"reference/api/#src.fewspy.api.Api.get_filters","text":"Get filters as dictionary, or sub-filters if a filter_id is specified. Source code in src\\fewspy\\api.py 61 62 63 64 65 66 67 def get_filters ( self , filter_id = None ): \"\"\"Get filters as dictionary, or sub-filters if a filter_id is specified.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"filters\" , kwargs = locals ()) result = get_filters ( ** kwargs ) return result","title":"get_filters()"},{"location":"reference/api/#src.fewspy.api.Api.get_locations","text":"Get location en return as a GeoDataFrame. Source code in src\\fewspy\\api.py 69 70 71 72 73 74 75 def get_locations ( self , filter_id = None , attributes = []): \"\"\"Get location en return as a GeoDataFrame.\"\"\" kwargs = self . __kwargs ( url_post_fix = \"locations\" , kwargs = locals ()) result = get_locations ( ** kwargs ) return result","title":"get_locations()"},{"location":"reference/api/#src.fewspy.api.Api.get_qualifiers","text":"Get FEWS qualifiers as Pandas DataFrame Returns: Name Type Description result pandas . DataFrame Pandas DataFrame with index \"id\" and pd . DataFrame columns \"name\" and \"group_id\". Source code in src\\fewspy\\api.py 77 78 79 80 81 82 83 84 85 86 87 88 def get_qualifiers ( self ) -> pd . DataFrame : \"\"\" Get FEWS qualifiers as Pandas DataFrame Returns: result (pandas.DataFrame): Pandas DataFrame with index \"id\" and columns \"name\" and \"group_id\". \"\"\" url = f \" { self . url } qualifiers\" result = get_qualifiers ( url , verify = self . ssl_verify , logger = self . logger ) return result","title":"get_qualifiers()"}]}