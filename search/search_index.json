{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fewspy","text":"<p>A Python API for the Deltares FEWS PI REST Web Service.</p> <p>Fewspy is build for speed; time-series requests are handled asynchronous, giving the results you need much faster.</p> <p> </p> <p>Documentation: https://d2hydro.github.io/fewspy</p> <p>Source Code: https://github.com/d2hydro/fewspy</p>"},{"location":"#installation","title":"Installation","text":"<p>Fewspy can be installed with pip in any environment with the following Python-packages properly installed:</p> <ul> <li>requests</li> <li>nest-asyncio</li> <li>aiohttp</li> <li>pandas</li> <li>geopandas</li> </ul> <p>In that activated environment you can add fewspy via pip by:</p> <pre><code>pip install fewspy\n</code></pre> <p>We recommend to build your environment using Anaconda. You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line:</p> <pre><code>conda env create -f environment.yml\n</code></pre>"},{"location":"#about","title":"About","text":"<p>Fewspy is developed and maintained by D2Hydro and freely available under an Open Source MIT license.</p>"},{"location":"manuals/contribute/","title":"Contribute","text":"<p>In the remainder of this manual we assume you:</p> <ul> <li>have your own GitHub account</li> <li>work with GitHub Desktop or Git</li> <li>can work with GeoPandas and Pytest</li> </ul> <p>Code-contributions can enter the main branch if:</p> <ol> <li>they are provided with docstring documentation</li> <li>are passing Flakes tests an Black styling</li> <li>are covered Pytest</li> </ol>"},{"location":"manuals/contribute/#installation-for-development","title":"Installation for development","text":"<p>To setup your development environment follow the instructions at Installation for development</p>"},{"location":"manuals/contribute/#small-contributions","title":"Small contributions","text":"<p>For small contributions we propose the following workflow:</p> <ol> <li>Fork and clone and install a copy</li> <li>Add and test new code</li> <li>Commit your copy and request a merge</li> </ol> <p>The remainder of this guide explains how to do it.</p>"},{"location":"manuals/contribute/#fork-repo","title":"Fork repo","text":"<p>Fork the respository to your own GitHub account:</p> <ol> <li>Click <code>fork</code> in the upper-right of the rository.</li> <li>Select your own github account</li> </ol> <p>The repository is now available on your own github account. </p>"},{"location":"manuals/contribute/#clone-repo","title":"Clone repo","text":"<p>Now clone your fork to your local drive. We do this with GitHub Desktop. After installation and authentication you can get a local copy by:</p> <ol> <li><code>Add</code> and <code>Clone repository...</code> in the top-left corner</li> <li>Find your fork and clone it to an empty directory on your local drive</li> <li>Press  clone`</li> </ol> <p></p> <p>Verify if the repository is on your local drive. </p>"},{"location":"manuals/contribute/#install-copy","title":"Install copy","text":"<p>Install the module in the activated <code>validatietool</code> environment in develop-mode:</p> <pre><code>pip install -e .\n</code></pre> <p>Now you're good to go!</p>"},{"location":"manuals/contribute/#improve-code","title":"Improve code","text":"<p>Make any code-contribution you deem necessary. Please don't forget to document your code with docstrings so they are documented.</p>"},{"location":"manuals/contribute/#test-code","title":"Test code","text":"<p>In the test-folder you add a test. A test-function starts with <code>test_</code>. In within the test-function you confirm if your new functionity is correct with <code>assert = True</code>. In this case</p> <p>Within your activated environment you can test your function with pytest:</p> <pre><code>pytest --cov-report term-missing --cov=src tests/\n</code></pre> <p>As your function is correct, the test should not fail. You can confirm all lines of your new code are tested:</p>"},{"location":"manuals/contribute/#contribute_1","title":"Contribute","text":"<p>Now you can contribute by: 1. Committing your code in your own repository 2. Request a merge of your branch into the main branch of fewspy</p>"},{"location":"manuals/contribute/#large-contributions","title":"Large contributions","text":"<p>For significant contributions we are happy to consider adding you to the contributors of our repository!</p>"},{"location":"manuals/get_started/","title":"Getting started","text":"In\u00a0[1]: Copied! <pre>from fewspy import Api\n\napi = Api(\n    url=r\"https://www.hydrobase.nl/fews/nzv/FewsWebServices/rest/fewspiservice/v1/\",\n    ssl_verify=False,\n)\n</pre> from fewspy import Api  api = Api(     url=r\"https://www.hydrobase.nl/fews/nzv/FewsWebServices/rest/fewspiservice/v1/\",     ssl_verify=False, ) <p>First we request the filters of our FEWS-API. It will return a dictionary in the same structure as the FEWS-API JSON response</p> In\u00a0[2]: Copied! <pre>api.get_filters()\n</pre> api.get_filters() Out[2]: <pre>[{'id': 'webservices',\n  'name': 'WebServices',\n  'child': [{'id': 'WDB',\n    'name': 'WAM Dashboard',\n    'child': [{'id': 'WDB_OW',\n      'name': 'Oppervlaktewater',\n      'child': [{'id': 'WDB_OW_KGM', 'name': 'Gemaal'},\n       {'id': 'WDB_OW_KST', 'name': 'Stuw'},\n       {'id': 'WDB_OW_INL', 'name': 'Inlaat'},\n       {'id': 'WDB_OW_KSL', 'name': 'Sluis'},\n       {'id': 'WDB_OW_MPN', 'name': 'Meetpunt (hydrologisch)'}]},\n     {'id': 'WDB_GW',\n      'name': 'Grondwater',\n      'child': [{'id': 'WDB_GW_GMW', 'name': 'Peilbuis'}]},\n     {'id': 'WDB_FC',\n      'name': 'Fysisch-Chemisch',\n      'child': [{'id': 'WDB_FC_PARA_ALGEMEEN', 'name': 'Algemene stoffen'},\n       {'id': 'WDB_FC_PARA_BASISFC',\n        'name': 'Basis fysisch-chemische stoffen'},\n       {'id': 'WDB_FC_MMN_KRW_TOESTAND',\n        'name': 'KRW toestandsbepaling meetpunten'},\n       {'id': 'WDB_FC_PARA_KRW_PRIORITAIR',\n        'name': 'KRW prioritaire stoffen (2013)'},\n       {'id': 'WDB_FC_PARA_SPECIFIEK',\n        'name': 'Specifiek verontreinigende stoffen'},\n       {'id': 'WDB_FC_MMN_GBM_TOTAAL',\n        'name': 'Gewasbeschermingsmiddelen meetpunten'},\n       {'id': 'WDB_FC_MPN_MMN_ZWEMWATER', 'name': 'Zwemwater meetpunten'},\n       {'id': 'WDB_FC_MPN_PARA_ALL',\n        'name': 'Alle fysisch-chemische meetpunten en parameters'}]},\n     {'id': 'WDB_ML',\n      'name': 'Meteorologie',\n      'child': [{'id': 'WDB_ML_KNMI_AWS',\n        'name': 'KNMI - Automatische weerstations (AWS)'},\n       {'id': 'WDB_ML_KNMI_IRIS',\n        'name': 'KNMI - Vrijwillige neerslagmeters (IRIS)'}]}]}]}]</pre> <p>Now we'll request the locations of an existing filter. In this example for filter_id <code>WDB_OW_KGM</code> (pumps/gemalen). The response JSON is parsed to a GeoPandas GeoDataFrame we can explore.</p> In\u00a0[3]: Copied! <pre>locations = api.get_locations(filter_id=\"WDB_OW_KGM\")\nlocations.explore()\n</pre> locations = api.get_locations(filter_id=\"WDB_OW_KGM\") locations.explore() Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Let's see what we have for a known location id.</p> In\u00a0[4]: Copied! <pre>locations.loc[\"NL34.HL.KGM311.HWZ1\"]\n</pre> locations.loc[\"NL34.HL.KGM311.HWZ1\"]  Out[4]: <pre>short_name               KGM311 - HWZ1 (BE)\nlat                      53.172517660606175\nlon                       6.579783481401717\nx                                  234743.0\ny                                  576863.0\nz                                       0.0\nparent_location_id           NL34.HL.KGM311\ngeometry              POINT (234743 576863)\nName: NL34.HL.KGM311.HWZ1, dtype: object</pre> <p>Let's see what time-series are available for this location, using the FEWS API get time series. Dirty trick is to set <code>end_time</code> equal to <code>start_time</code> as the FEWS-API will give faster response. We set <code>only headers</code> to omit the transfer of actual time series data.</p> In\u00a0[5]: Copied! <pre>from datetime import datetime\n\ntime_series_headers = api.get_time_series(\n    filter_id=\"WDB_OW_KGM\",\n    location_ids=[\"NL34.HL.KGM156.KWK\"],\n    start_time=datetime(2023,1,1),\n    end_time=datetime(2023,1,1),\n    only_headers=True)\n\nprint(f\"We have {len(time_series_headers)} time series\\n\")\n\nprint(\"If we print the header of the first time series pretty we get:\\n\")\ntime_series_headers.time_series[0].header.__dict__\n</pre> from datetime import datetime  time_series_headers = api.get_time_series(     filter_id=\"WDB_OW_KGM\",     location_ids=[\"NL34.HL.KGM156.KWK\"],     start_time=datetime(2023,1,1),     end_time=datetime(2023,1,1),     only_headers=True)  print(f\"We have {len(time_series_headers)} time series\\n\")  print(\"If we print the header of the first time series pretty we get:\\n\") time_series_headers.time_series[0].header.__dict__ <pre>We have 1 time series\n\nIf we print the header of the first time series pretty we get:\n\n</pre> Out[5]: <pre>{'type': 'instantaneous',\n 'module_instance_id': 'Productie',\n 'location_id': 'NL34.HL.KGM156.KWK',\n 'parameter_id': 'Q [m3/s] [NVT] [OW]',\n 'time_step': {'unit': 'nonequidistant'},\n 'start_date': datetime.datetime(2023, 1, 1, 0, 0),\n 'end_date': datetime.datetime(2023, 1, 1, 0, 0),\n 'miss_val': -999.0,\n 'lat': 53.3514399934006,\n 'lon': 6.449843832251746,\n 'x': 225761.0,\n 'y': 596638.0,\n 'units': 'm3/s',\n 'station_name': 'KGM156 - KWK',\n 'z': 0.0,\n 'qualifier_id': ['productie']}</pre> <p>Now we have all relevant input for requesting the full time series. We request the full series again and now plot the events.</p> <p>Notes:</p> <ol> <li>TimeSeriesSets in FEWSPY object follow the structure of a FEWS PI-JSON as found in the FEWS API get timeseries documentation</li> <li>The key-words are all <code>snake_case</code> (e.g. location_ids), following Python-conventions whereas FEWS-API conforms to <code>camelCasing</code> (locationIds in the same example). But that is all just style and convention, it all means the same!</li> </ol> In\u00a0[6]: Copied! <pre>time_series_set = api.get_time_series(\n    filter_id=\"WDB_OW\",\n    location_ids=[\"NL34.HL.KGM156.KWK\"],\n    parameter_ids=[\"Q [m3/s] [NVT] [OW]\"],\n    qualifier_ids=[\"productie\"],\n    start_time=datetime(2022,9,1),\n    end_time=datetime(2023,1,1))\n\ntime_series = time_series_set.time_series[0]\ntime_series.events.value.plot(\n    ylabel=time_series.header.parameter_id,\n    title=time_series.header.location_id,\n    grid=True)\n</pre> time_series_set = api.get_time_series(     filter_id=\"WDB_OW\",     location_ids=[\"NL34.HL.KGM156.KWK\"],     parameter_ids=[\"Q [m3/s] [NVT] [OW]\"],     qualifier_ids=[\"productie\"],     start_time=datetime(2022,9,1),     end_time=datetime(2023,1,1))  time_series = time_series_set.time_series[0] time_series.events.value.plot(     ylabel=time_series.header.parameter_id,     title=time_series.header.location_id,     grid=True) Out[6]: <pre>&lt;AxesSubplot: title={'center': 'NL34.HL.KGM156.KWK'}, xlabel='datetime', ylabel='Q [m3/s] [NVT] [OW]'&gt;</pre>"},{"location":"manuals/get_started/#getting-started","title":"Getting started\u00b6","text":"<p>Let's get started exploring the content of a FEWS-API.</p> <p>We define our FEWS-API Python object with an url:</p>"},{"location":"manuals/installation/","title":"Installation","text":""},{"location":"manuals/installation/#installation-for-regular-use","title":"Installation for regular use","text":"<p>Fewspy can be installed with pip in any environment with the following Python-packages properly installed:</p> <ul> <li>requests</li> <li>aiohttp</li> <li>pandas</li> <li>geopandas</li> </ul> <p>In that  environment you can add fewspy via pip by:</p> <pre><code>pip install fewspy\n</code></pre> <p>If you don't have such an environment, we recommend to build your environment using Anaconda. You can build an environment \u00e1nd install fewspy by conda in one go using this environment.yml from the command-line:</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>An eloborated installation instruction can be found on: installation tutorial</p>"},{"location":"manuals/installation/#installation-for-development","title":"Installation for development","text":"<p>For development we recommend the following approach:</p> <ol> <li>Make sure you have git Git installed.</li> <li>Make sure you have a copy of Anaconda or Miniconda installed.</li> <li> <p>Clone the fewspy, e.g. via GIT:</p> <p><code>git clone https://github.com/d2hydro/fewspy.git</code></p> </li> <li> <p>Make sure you have the fewspy development environment installed, using the environment_dev.yml. By e.g. Anaconda:</p> <p><code>conda env create -f environment_dev.yml</code></p> </li> <li> <p>Activate the environment in the Command Prompt (or Anaconda Prompt) by:</p> <p><code>conda activate fewspy</code></p> </li> <li> <p>Now <code>cd</code> to the clone on your disk and install fewspy in dev-mode (so with -e):</p> <p><code>cd path\\to\\fewspy pip install -e .</code></p> <p>010 7036559</p> </li> </ol>"},{"location":"reference/api/","title":"FEWS Rest API","text":"<p>Module for calling the FEWS REST API.</p> <p>The module contains one class and methods corresponding with the FEWS PI-REST requests: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service</p>"},{"location":"reference/api/#src.fewspy.api.Api","title":"<code>Api</code>","text":"<p>Python API for the Deltares FEWS PI REST Web Service.</p> <p>For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>class Api:\n    \"\"\"\n    Python API for the Deltares FEWS PI REST Web Service.\n\n    For more info on how-to work with the FEWS REST Web Service, visit the Deltares Website: https://publicwiki.deltares.nl/display/FEWSDOC/FEWS+PI+REST+Web+Service\n    \"\"\"\n\n    def __init__(self, url, logger=None, ssl_verify=None):\n        self.document_format = \"PI_JSON\"\n        self.logger = logger\n        self.timer = Timer(logger)\n        self.url, verify = validate_url(url)\n\n        # set ssl_verify\n        if ssl_verify is None:\n            self.ssl_verify = verify\n        else:\n            self.ssl_verify = ssl_verify\n\n        # set logger\n        if logger is None:\n            self.logger = LOGGER\n        else:\n            self.logger = logger\n\n    def __kwargs(self, url_post_fix: str, kwargs: dict) -&gt; dict:\n        kwargs = {\n            **kwargs,\n            **dict(\n                url=f\"{self.url}{url_post_fix}\",\n                document_format=self.document_format,\n                verify=self.ssl_verify,\n                logger=self.logger,\n            ),\n        }\n        kwargs.pop(\"self\")\n        kwargs.pop(\"parallel\", None)\n        return kwargs\n\n    def get_parameters(self, filter_id=None):\n        \"\"\"\n        Get FEWS qualifiers as a pandas DataFrame\n\n        Args:\n            filter_id (str): the FEWS id of the filter to pass as request parameter\n\n        Returns:\n            df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n            \"name\" and \"group_id\".\n\n        \"\"\"\n\n        kwargs = self.__kwargs(url_post_fix=\"parameters\", kwargs=locals())\n        result = get_parameters(**kwargs)\n\n        return result\n\n    def get_filters(self, filter_id=None):\n        \"\"\"\n        Get FEWS qualifiers as a pandas DataFrame\n\n        Args:\n            E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n            filter_id (str): the FEWS id of the filter to pass as request parameter\n\n        Returns:\n            df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n            \"name\" and \"group_id\".\n\n        \"\"\"\n\n        kwargs = self.__kwargs(url_post_fix=\"filters\", kwargs=locals())\n        result = get_filters(**kwargs)\n\n        return result\n\n    def get_locations(self, filter_id=None, attributes=[], remove_duplicates=False):\n        \"\"\"\n        Get FEWS qualifiers as a pandas DataFrame\n\n        Args:\n            E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n            filter_id (str): the FEWS id of the filter to pass as request parameter\n            attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame.\n            remove_duplicates (bool): if True, duplicated location_ids are removed. Default = False\n\n        Returns:\n            df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n            \"name\" and \"group_id\".\n\n        \"\"\"\n\n        kwargs = self.__kwargs(url_post_fix=\"locations\", kwargs=locals())\n        result = get_locations(**kwargs)\n\n        return result\n\n    def get_qualifiers(self) -&gt; pd.DataFrame:\n        \"\"\"\n        Get FEWS qualifiers as Pandas DataFrame\n\n        Returns:\n            df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n            \"name\" and \"group_id\".\n\n        \"\"\"\n        url = f\"{self.url}qualifiers\"\n        result = get_qualifiers(url, verify=self.ssl_verify, logger=self.logger)\n        return result\n\n    def get_timezone_id(self):\n        \"\"\"\n        Get FEWS timezone_id\n\n        Returns:\n            str: timezone id FEWS API is running on\n\n        \"\"\"\n        url = f\"{self.url}timezoneid\"\n        result = get_timezone_id(url, verify=self.ssl_verify, logger=self.logger)\n        return result\n\n    def get_time_series(\n        self,\n        filter_id,\n        location_ids=None,\n        start_time=None,\n        end_time=None,\n        parameter_ids=None,\n        qualifier_ids=None,\n        thinning=None,\n        only_headers=False,\n        omit_missing=True,\n        show_statistics=False,\n        parallel=False,\n    ):\n        \"\"\"\n        Get FEWS qualifiers as a pandas DataFrame\n\n        Args:\n            filter_id (str): the FEWS id of the filter to pass as request parameter\n            location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None.\n            parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None.\n            qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None.\n            start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None.\n            end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None.\n            thinning (int): integer value for thinning parameter to use in request. Defaults to None.\n            only_headers (bool): if True, only headers will be returned. Defaults to False.\n            omit_missing (bool): if True, no missings values will be returned. Defaults to True.\n            show_statistics (bool): if True, time series statistics will be included in header. Defaults to False.\n            parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False\n\n        Returns:\n            df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n            \"name\" and \"group_id\".\n\n        \"\"\"\n        kwargs = self.__kwargs(url_post_fix=\"timeseries\", kwargs=locals())\n        if parallel:\n            kwargs.pop(\"only_headers\")\n            kwargs.pop(\"show_statistics\")\n            result = get_time_series_async(**kwargs)\n        else:\n            result = get_time_series(**kwargs)\n\n        return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_filters","title":"<code>get_filters(filter_id=None)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_filters(self, filter_id=None):\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    kwargs = self.__kwargs(url_post_fix=\"filters\", kwargs=locals())\n    result = get_filters(**kwargs)\n\n    return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_locations","title":"<code>get_locations(filter_id=None, attributes=[], remove_duplicates=False)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <code>attributes</code> <code>list</code> <p>if not emtpy, the location attributes to include as columns in the pandas DataFrame.</p> <code>[]</code> <code>remove_duplicates</code> <code>bool</code> <p>if True, duplicated location_ids are removed. Default = False</p> <code>False</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_locations(self, filter_id=None, attributes=[], remove_duplicates=False):\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame.\n        remove_duplicates (bool): if True, duplicated location_ids are removed. Default = False\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    kwargs = self.__kwargs(url_post_fix=\"locations\", kwargs=locals())\n    result = get_locations(**kwargs)\n\n    return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_parameters","title":"<code>get_parameters(filter_id=None)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_parameters(self, filter_id=None):\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    kwargs = self.__kwargs(url_post_fix=\"parameters\", kwargs=locals())\n    result = get_parameters(**kwargs)\n\n    return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_qualifiers","title":"<code>get_qualifiers()</code>","text":"<p>Get FEWS qualifiers as Pandas DataFrame</p> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>DataFrame</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_qualifiers(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get FEWS qualifiers as Pandas DataFrame\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n    url = f\"{self.url}qualifiers\"\n    result = get_qualifiers(url, verify=self.ssl_verify, logger=self.logger)\n    return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_time_series","title":"<code>get_time_series(filter_id, location_ids=None, start_time=None, end_time=None, parameter_ids=None, qualifier_ids=None, thinning=None, only_headers=False, omit_missing=True, show_statistics=False, parallel=False)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> required <code>location_ids</code> <code>list</code> <p>list with FEWS location ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>parameter_ids</code> <code>list</code> <p>list with FEWS parameter ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>qualifier_ids</code> <code>list</code> <p>list with FEWS qualifier ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>start_time</code> <code>datetime</code> <p>datetime-object with start datetime to use in request. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>datetime-object with end datetime to use in request. Defaults to None.</p> <code>None</code> <code>thinning</code> <code>int</code> <p>integer value for thinning parameter to use in request. Defaults to None.</p> <code>None</code> <code>only_headers</code> <code>bool</code> <p>if True, only headers will be returned. Defaults to False.</p> <code>False</code> <code>omit_missing</code> <code>bool</code> <p>if True, no missings values will be returned. Defaults to True.</p> <code>True</code> <code>show_statistics</code> <code>bool</code> <p>if True, time series statistics will be included in header. Defaults to False.</p> <code>False</code> <code>parallel</code> <code>bool</code> <p>if True, timeseries are requested by the asynchronous wrapper. Defaults to False</p> <code>False</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_time_series(\n    self,\n    filter_id,\n    location_ids=None,\n    start_time=None,\n    end_time=None,\n    parameter_ids=None,\n    qualifier_ids=None,\n    thinning=None,\n    only_headers=False,\n    omit_missing=True,\n    show_statistics=False,\n    parallel=False,\n):\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None.\n        parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None.\n        qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None.\n        start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None.\n        end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None.\n        thinning (int): integer value for thinning parameter to use in request. Defaults to None.\n        only_headers (bool): if True, only headers will be returned. Defaults to False.\n        omit_missing (bool): if True, no missings values will be returned. Defaults to True.\n        show_statistics (bool): if True, time series statistics will be included in header. Defaults to False.\n        parallel (bool): if True, timeseries are requested by the asynchronous wrapper. Defaults to False\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n    kwargs = self.__kwargs(url_post_fix=\"timeseries\", kwargs=locals())\n    if parallel:\n        kwargs.pop(\"only_headers\")\n        kwargs.pop(\"show_statistics\")\n        result = get_time_series_async(**kwargs)\n    else:\n        result = get_time_series(**kwargs)\n\n    return result\n</code></pre>"},{"location":"reference/api/#src.fewspy.api.Api.get_timezone_id","title":"<code>get_timezone_id()</code>","text":"<p>Get FEWS timezone_id</p> <p>Returns:</p> Name Type Description <code>str</code> <p>timezone id FEWS API is running on</p> Source code in <code>src\\fewspy\\api.py</code> <pre><code>def get_timezone_id(self):\n    \"\"\"\n    Get FEWS timezone_id\n\n    Returns:\n        str: timezone id FEWS API is running on\n\n    \"\"\"\n    url = f\"{self.url}timezoneid\"\n    result = get_timezone_id(url, verify=self.ssl_verify, logger=self.logger)\n    return result\n</code></pre>"},{"location":"reference/timeseries/","title":"Time Series in FEWS PI format","text":"<p>See also: https://publicwiki.deltares.nl/display/FEWSDOC/Delft-Fews+Published+Interface+timeseries+Format+%28PI%29+Import</p>"},{"location":"reference/timeseries/#src.fewspy.time_series.Events","title":"<code>Events</code>","text":"<p>               Bases: <code>DataFrame</code></p> <p>FEWS-PI events in pandas DataFrame</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>class Events(pd.DataFrame):\n    \"\"\"FEWS-PI events in pandas DataFrame\"\"\"\n\n    @classmethod\n    def from_pi_events(\n        cls, pi_events: list, missing_value: float = None, tz_offset: float = None\n    ):\n        \"\"\"\n        Parse Events from FEWS PI events dict.\n\n        Args:\n            pi_events (dict): FEWS PI events as dictionary\n\n        Returns:\n            Events: pandas DataFrame\n\n        \"\"\"\n\n        df = cls(pi_events)\n\n        # set datetime\n        if tz_offset is not None:\n            df[\"datetime\"] = pd.to_datetime(\n                df[\"date\"] + \" \" + df[\"time\"]\n            ) - pd.Timedelta(hours=tz_offset)\n        else:\n            df[\"datetime\"] = pd.to_datetime(df[\"date\"] + \" \" + df[\"time\"])\n\n        # drop columns and add missing columns\n        drop_cols = [i for i in df.columns if i not in EVENT_COLUMNS]\n        df.drop(columns=drop_cols, inplace=True)\n        for i in EVENT_COLUMNS:\n            if i not in df.columns:\n                df[i] = pd.NA\n\n        # set numeric types\n        df = df.astype(dtype={\"value\": \"float32\", \"flag\": \"uint8\"})\n\n        # remove missings (if specified)\n        if missing_value is not None:\n            df = df.loc[df[\"value\"] != missing_value]\n\n        # set datetime to index\n        df.set_index(\"datetime\", inplace=True)\n\n        return df\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.Events.from_pi_events","title":"<code>from_pi_events(pi_events, missing_value=None, tz_offset=None)</code>  <code>classmethod</code>","text":"<p>Parse Events from FEWS PI events dict.</p> <p>Parameters:</p> Name Type Description Default <code>pi_events</code> <code>dict</code> <p>FEWS PI events as dictionary</p> required <p>Returns:</p> Name Type Description <code>Events</code> <p>pandas DataFrame</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@classmethod\ndef from_pi_events(\n    cls, pi_events: list, missing_value: float = None, tz_offset: float = None\n):\n    \"\"\"\n    Parse Events from FEWS PI events dict.\n\n    Args:\n        pi_events (dict): FEWS PI events as dictionary\n\n    Returns:\n        Events: pandas DataFrame\n\n    \"\"\"\n\n    df = cls(pi_events)\n\n    # set datetime\n    if tz_offset is not None:\n        df[\"datetime\"] = pd.to_datetime(\n            df[\"date\"] + \" \" + df[\"time\"]\n        ) - pd.Timedelta(hours=tz_offset)\n    else:\n        df[\"datetime\"] = pd.to_datetime(df[\"date\"] + \" \" + df[\"time\"])\n\n    # drop columns and add missing columns\n    drop_cols = [i for i in df.columns if i not in EVENT_COLUMNS]\n    df.drop(columns=drop_cols, inplace=True)\n    for i in EVENT_COLUMNS:\n        if i not in df.columns:\n            df[i] = pd.NA\n\n    # set numeric types\n    df = df.astype(dtype={\"value\": \"float32\", \"flag\": \"uint8\"})\n\n    # remove missings (if specified)\n    if missing_value is not None:\n        df = df.loc[df[\"value\"] != missing_value]\n\n    # set datetime to index\n    df.set_index(\"datetime\", inplace=True)\n\n    return df\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.Header","title":"<code>Header</code>  <code>dataclass</code>","text":"<p>FEWS-PI header-style dataclass</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@dataclass\nclass Header:\n    \"\"\"FEWS-PI header-style dataclass\"\"\"\n\n    type: str\n    module_instance_id: str\n    location_id: str\n    parameter_id: str\n    time_step: dict\n    start_date: datetime\n    end_date: datetime\n    miss_val: float\n    lat: float\n    lon: float\n    x: float\n    y: float\n    units: str\n    station_name: str = None\n    z: float = None\n    qualifier_id: List[str] = None\n\n    @classmethod\n    def from_pi_header(cls, pi_header: dict):\n        \"\"\"\n        Parse Header from FEWS PI header dict.\n\n        Args:\n            pi_header (dict): FEWS PI header as dictionary\n\n        Returns:\n            Header: FEWS-PI header-style dataclass\n\n        \"\"\"\n\n        def _convert_kv(k: str, v) -&gt; dict:\n            k = camel_to_snake_case(k)\n            if k in DATETIME_KEYS:\n                v = dict_to_datetime(v)\n            if k in FLOAT_KEYS:\n                v = float(v)\n            return k, v\n\n        args = (_convert_kv(k, v) for k, v in pi_header.items())\n        return cls(**{i[0]: i[1] for i in args})\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.Header.from_pi_header","title":"<code>from_pi_header(pi_header)</code>  <code>classmethod</code>","text":"<p>Parse Header from FEWS PI header dict.</p> <p>Parameters:</p> Name Type Description Default <code>pi_header</code> <code>dict</code> <p>FEWS PI header as dictionary</p> required <p>Returns:</p> Name Type Description <code>Header</code> <p>FEWS-PI header-style dataclass</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@classmethod\ndef from_pi_header(cls, pi_header: dict):\n    \"\"\"\n    Parse Header from FEWS PI header dict.\n\n    Args:\n        pi_header (dict): FEWS PI header as dictionary\n\n    Returns:\n        Header: FEWS-PI header-style dataclass\n\n    \"\"\"\n\n    def _convert_kv(k: str, v) -&gt; dict:\n        k = camel_to_snake_case(k)\n        if k in DATETIME_KEYS:\n            v = dict_to_datetime(v)\n        if k in FLOAT_KEYS:\n            v = float(v)\n        return k, v\n\n    args = (_convert_kv(k, v) for k, v in pi_header.items())\n    return cls(**{i[0]: i[1] for i in args})\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.TimeSeries","title":"<code>TimeSeries</code>  <code>dataclass</code>","text":"<p>FEWS-PI time series</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@dataclass\nclass TimeSeries:\n    \"\"\"FEWS-PI time series\"\"\"\n\n    header: Header\n    events: Events = pd.DataFrame(columns=EVENT_COLUMNS).set_index(\"datetime\")\n\n    @classmethod\n    def from_pi_time_series(cls, pi_time_series: dict, time_zone: float = None):\n        \"\"\"Parse TimeSeries from FEWS PI timeseries dict.\n\n        Args:\n            pi_time_series (dict): FEWS PI timeseries as dictionary\n            time_zone (float, optional): time_zone. Defaults to None.\n\n        Returns:\n            fewspy.TimeSeries: time series in FEWS PI format\n        \"\"\"\n        header = Header.from_pi_header(pi_time_series[\"header\"])\n        kwargs = dict(header=header)\n        if \"events\" in pi_time_series.keys():\n            kwargs[\"events\"] = Events.from_pi_events(\n                pi_time_series[\"events\"], header.miss_val, time_zone\n            )\n        return cls(**kwargs)\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.TimeSeries.from_pi_time_series","title":"<code>from_pi_time_series(pi_time_series, time_zone=None)</code>  <code>classmethod</code>","text":"<p>Parse TimeSeries from FEWS PI timeseries dict.</p> <p>Parameters:</p> Name Type Description Default <code>pi_time_series</code> <code>dict</code> <p>FEWS PI timeseries as dictionary</p> required <code>time_zone</code> <code>float</code> <p>time_zone. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>fewspy.TimeSeries: time series in FEWS PI format</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@classmethod\ndef from_pi_time_series(cls, pi_time_series: dict, time_zone: float = None):\n    \"\"\"Parse TimeSeries from FEWS PI timeseries dict.\n\n    Args:\n        pi_time_series (dict): FEWS PI timeseries as dictionary\n        time_zone (float, optional): time_zone. Defaults to None.\n\n    Returns:\n        fewspy.TimeSeries: time series in FEWS PI format\n    \"\"\"\n    header = Header.from_pi_header(pi_time_series[\"header\"])\n    kwargs = dict(header=header)\n    if \"events\" in pi_time_series.keys():\n        kwargs[\"events\"] = Events.from_pi_events(\n            pi_time_series[\"events\"], header.miss_val, time_zone\n        )\n    return cls(**kwargs)\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.TimeSeriesSet","title":"<code>TimeSeriesSet</code>  <code>dataclass</code>","text":"<p>FEWS-PI time series set</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@dataclass\nclass TimeSeriesSet:\n    \"\"\"FEWS-PI time series set\"\"\"\n    version: str = None\n    time_zone: float = None\n    time_series: List[TimeSeries] = field(default_factory=list)\n\n    def __len__(self):\n        return len(self.time_series)\n\n    @classmethod\n    def from_pi_time_series(cls, pi_time_series_set: dict):\n        \"\"\"Parse TimeSeries from FEWS PI time series set dict.\n\n        Args:\n            pi_time_series_set (dict): FEWS PI time series set as dictionary\n\n        Returns:\n            fewspy.TimeSeriesSet: Time series set with multiple time series\n        \"\"\"\n        kwargs = {}\n        if \"version\" in pi_time_series_set.keys():\n            kwargs[\"version\"] = pi_time_series_set[\"version\"]\n        if \"timeZone\" in pi_time_series_set.keys():\n            time_zone = float(pi_time_series_set[\"timeZone\"])\n            kwargs[\"time_zone\"] = time_zone\n        if \"timeSeries\" in pi_time_series_set.keys():\n            kwargs[\"time_series\"] = [\n                TimeSeries.from_pi_time_series(i, time_zone)\n                for i in pi_time_series_set[\"timeSeries\"]\n            ]\n        return cls(**kwargs)\n\n    def add(self, time_series_set):\n        # add time_series_set to the time_series_set\n        return self\n\n    @property\n    def empty(self):\n        return all([i.events.empty for i in self.time_series])\n\n    @property\n    def parameter_ids(self):\n        return list(set([i.header.parameter_id for i in self.time_series]))\n\n    @property\n    def location_ids(self):\n        return list(set([i.header.location_id for i in self.time_series]))\n\n    @property\n    def qualifier_ids(self):\n        qualifiers = (i.header.qualifier_id for i in self.time_series)\n        qualifiers = [i for i in qualifiers if i is not None]\n\n        return list(set(flatten_list(qualifiers)))\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.TimeSeriesSet.from_pi_time_series","title":"<code>from_pi_time_series(pi_time_series_set)</code>  <code>classmethod</code>","text":"<p>Parse TimeSeries from FEWS PI time series set dict.</p> <p>Parameters:</p> Name Type Description Default <code>pi_time_series_set</code> <code>dict</code> <p>FEWS PI time series set as dictionary</p> required <p>Returns:</p> Type Description <p>fewspy.TimeSeriesSet: Time series set with multiple time series</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>@classmethod\ndef from_pi_time_series(cls, pi_time_series_set: dict):\n    \"\"\"Parse TimeSeries from FEWS PI time series set dict.\n\n    Args:\n        pi_time_series_set (dict): FEWS PI time series set as dictionary\n\n    Returns:\n        fewspy.TimeSeriesSet: Time series set with multiple time series\n    \"\"\"\n    kwargs = {}\n    if \"version\" in pi_time_series_set.keys():\n        kwargs[\"version\"] = pi_time_series_set[\"version\"]\n    if \"timeZone\" in pi_time_series_set.keys():\n        time_zone = float(pi_time_series_set[\"timeZone\"])\n        kwargs[\"time_zone\"] = time_zone\n    if \"timeSeries\" in pi_time_series_set.keys():\n        kwargs[\"time_series\"] = [\n            TimeSeries.from_pi_time_series(i, time_zone)\n            for i in pi_time_series_set[\"timeSeries\"]\n        ]\n    return cls(**kwargs)\n</code></pre>"},{"location":"reference/timeseries/#src.fewspy.time_series.reliables","title":"<code>reliables(df, threshold=6)</code>","text":"<p>Filters reliables from an Events type Pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>input Events-type Pandas Dataframe</p> required <code>threshold</code> <code>int</code> <p>threshold for unreleables. Defaults to 6.</p> <code>6</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Pandas DataFrame with reliable data only</p> Source code in <code>src\\fewspy\\time_series.py</code> <pre><code>def reliables(df: pd.DataFrame, threshold: int = 6) -&gt; pd.DataFrame:\n    \"\"\"\n    Filters reliables from an Events type Pandas DataFrame\n\n    Args:\n        df (pd.DataFrame): input Events-type Pandas Dataframe\n        threshold (int, optional): threshold for unreleables. Defaults to 6.\n\n    Returns:\n        pd.DataFrame: Pandas DataFrame with reliable data only\n\n    \"\"\"\n\n    return df.loc[df[\"flag\"] &lt; threshold]\n</code></pre>"},{"location":"reference/wrappers/","title":"Python wrappers for the Deltares FEWS PI REST Web Service","text":""},{"location":"reference/wrappers/#src.fewspy.wrappers.get_filters.get_filters","title":"<code>get_filters(url, filter_id=None, document_format='PI_JSON', verify=False, logger=LOGGER)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <code>document_format</code> <code>str</code> <p>request document format to return. Defaults to PI_JSON.</p> <code>'PI_JSON'</code> <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>List[dict]</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_filters.py</code> <pre><code>def get_filters(\n    url: str,\n    filter_id: str = None,\n    document_format: str = \"PI_JSON\",\n    verify: bool = False,\n    logger=LOGGER,\n) -&gt; List[dict]:\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/filters\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        document_format (str): request document format to return. Defaults to PI_JSON.\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By\n        default, a logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    # do the request\n    timer = Timer(logger)\n    parameters = parameters_to_fews(locals())\n    response = requests.get(url, parameters, verify=verify)\n    timer.report(\"Filters request\")\n\n    # parse the response\n    result = []\n    if response.status_code == 200:\n        if \"filters\" in response.json().keys():\n            result = response.json()[\"filters\"]\n        timer.report(\"Filters parsed\")\n    else:\n        logger.error(f\"FEWS Server responds {response.text}\")\n\n    return result\n</code></pre>"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_locations.get_locations","title":"<code>get_locations(url, filter_id=None, document_format='PI_JSON', attributes=[], verify=False, logger=LOGGER, remove_duplicates=False)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <code>document_format</code> <code>str</code> <p>request document format to return. Defaults to PI_JSON.</p> <code>'PI_JSON'</code> <code>attributes</code> <code>list</code> <p>if not emtpy, the location attributes to include as columns in the pandas DataFrame.</p> <code>[]</code> <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By default, a logger will ge created.</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>DataFrame</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_locations.py</code> <pre><code>def get_locations(\n    url: str,\n    filter_id: str = None,\n    document_format: str = \"PI_JSON\",\n    attributes: list = [],\n    verify: bool = False,\n    logger=LOGGER,\n    remove_duplicates: bool = False\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        document_format (str): request document format to return. Defaults to PI_JSON.\n        attributes (list): if not emtpy, the location attributes to include as columns in the pandas DataFrame.\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By default, a logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    # do the request\n    timer = Timer(logger)\n    parameters = parameters_to_fews(locals())\n    response = requests.get(url, parameters, verify=verify)\n    timer.report(\"Locations request\")\n\n    # parse the response\n    if response.status_code == 200:\n        # convert to gdf and snake_case\n        gdf = gpd.GeoDataFrame(response.json()[\"locations\"])\n        gdf.columns = [camel_to_snake_case(i) for i in gdf.columns]\n\n        # remove duplicates\n        if remove_duplicates:\n            gdf.drop_duplicates(subset=\"location_id\", inplace=True, ignore_index=True)\n\n        # set index\n        gdf.set_index(\"location_id\", inplace=True)\n\n        # handle geometry and crs\n        gdf[\"geometry\"] = xy_array_to_point(gdf[[\"x\", \"y\"]].values)\n        gdf.crs = geo_datum_to_crs(response.json()[\"geoDatum\"])\n\n        # handle attributes\n        if attributes:\n            gdf.loc[:, attributes] = attributes_to_array(\n                gdf[\"attributes\"].values, attributes\n            )\n        gdf.drop(columns=[\"attributes\"], inplace=True)\n\n        timer.report(\"Locations parsed\")\n\n    else:\n        logger.error(f\"FEWS Server responds {response.text}\")\n        gdf = gpd.GeoDataFrame()\n\n    return gdf\n</code></pre>"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_parameters.get_parameters","title":"<code>get_parameters(url, filter_id=None, document_format='PI_JSON', verify=False, logger=LOGGER)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> <code>None</code> <code>document_format</code> <code>str</code> <p>request document format to return. Defaults to PI_JSON.</p> <code>'PI_JSON'</code> <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>List[dict]</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_parameters.py</code> <pre><code>def get_parameters(\n    url: str,\n    filter_id: str = None,\n    document_format: str = \"PI_JSON\",\n    verify: bool = False,\n    logger=LOGGER,\n) -&gt; List[dict]:\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        document_format (str): request document format to return. Defaults to PI_JSON.\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By\n        default, a logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    # do the request\n    timer = Timer(logger)\n    parameters = parameters_to_fews(locals())\n    response = requests.get(url, parameters, verify=verify)\n    timer.report(\"Parameters request\")\n\n    # parse the response\n    df = pd.DataFrame(columns=COLUMNS)\n    if response.status_code == 200:\n        if \"timeSeriesParameters\" in response.json().keys():\n            df = pd.DataFrame(response.json()[\"timeSeriesParameters\"])\n            df.columns = [camel_to_snake_case(i) for i in df.columns]\n            df[\"uses_datum\"] = df[\"uses_datum\"] == \"true\"\n            timer.report(\"Parameters parsed\")\n    else:\n        logger.error(f\"FEWS Server responds {response.text}\")\n\n    df.set_index(\"id\", inplace=True)\n\n    return df\n</code></pre>"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_qualifiers.get_qualifiers","title":"<code>get_qualifiers(url, verify=False, logger=LOGGER)</code>","text":"<p>Get FEWS qualifiers as Pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>DataFrame</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_qualifiers.py</code> <pre><code>def get_qualifiers(url: str, verify: bool = False, logger=LOGGER) -&gt; pd.DataFrame:\n    \"\"\"\n    Get FEWS qualifiers as Pandas DataFrame\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By\n        default, a new logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n\n    # do the request\n    timer = Timer(logger)\n    response = requests.get(url, verify=False)\n    timer.report(\"Qualifiers request\")\n\n    # parse the response\n    if response.status_code == 200:\n        tree = ElementTree.fromstring(response.content)\n        qualifiers_tree = [i for i in tree.iter(tag=f\"{NS}qualifier\")]\n        qualifiers_tuple = (_element_to_tuple(i) for i in qualifiers_tree)\n        df = pd.DataFrame(qualifiers_tuple, columns=COLUMNS)\n        timer.report(\"Qualifiers parsed\")\n    else:\n        logger.error(f\"FEWS Server responds {response.text}\")\n        df = pd.DataFrame(columns=COLUMNS)\n    df.set_index(\"id\", inplace=True)\n\n    return df\n</code></pre>"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_time_series.get_time_series","title":"<code>get_time_series(url, filter_id, location_ids=None, parameter_ids=None, qualifier_ids=None, start_time=None, end_time=None, thinning=None, only_headers=False, omit_missing=True, show_statistics=False, document_format='PI_JSON', verify=False, logger=LOGGER)</code>","text":"<p>Get FEWS qualifiers as a pandas DataFrame</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> required <code>location_ids</code> <code>list</code> <p>list with FEWS location ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>parameter_ids</code> <code>list</code> <p>list with FEWS parameter ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>qualifier_ids</code> <code>list</code> <p>list with FEWS qualifier ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>start_time</code> <code>datetime</code> <p>datetime-object with start datetime to use in request. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>datetime-object with end datetime to use in request. Defaults to None.</p> <code>None</code> <code>thinning</code> <code>int</code> <p>integer value for thinning parameter to use in request. Defaults to None.</p> <code>None</code> <code>only_headers</code> <code>bool</code> <p>if True, only headers will be returned. Defaults to False.</p> <code>False</code> <code>omit_missing</code> <code>bool</code> <p>if True, no missings values will be returned. Defaults to True.</p> <code>True</code> <code>show_statistics</code> <code>bool</code> <p>if True, time series statistics will be included in header. Defaults to False.</p> <code>False</code> <code>document_format</code> <code>str</code> <p>request document format to return. Defaults to PI_JSON.</p> <code>'PI_JSON'</code> <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>DataFrame</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_time_series.py</code> <pre><code>def get_time_series(\n    url: str,\n    filter_id: str,\n    location_ids: Union[str, List[str]] = None,\n    parameter_ids: Union[str, List[str]] = None,\n    qualifier_ids: Union[str, List[str]] = None,\n    start_time: datetime = None,\n    end_time: datetime = None,\n    thinning: int = None,\n    only_headers: bool = False,\n    omit_missing: bool = True,\n    show_statistics: bool = False,\n    document_format: str = \"PI_JSON\",\n    verify: bool = False,\n    logger=LOGGER,\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Get FEWS qualifiers as a pandas DataFrame\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None.\n        parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None.\n        qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None.\n        start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None.\n        end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None.\n        thinning (int): integer value for thinning parameter to use in request. Defaults to None.\n        only_headers (bool): if True, only headers will be returned. Defaults to False.\n        omit_missing (bool): if True, no missings values will be returned. Defaults to True.\n        show_statistics (bool): if True, time series statistics will be included in header. Defaults to False.\n        document_format (str): request document format to return. Defaults to PI_JSON.\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By\n        default, a logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n    report_string = _ts_or_headers(only_headers)\n\n    # do the request\n    timer = Timer(logger)\n    parameters = parameters_to_fews(locals())\n    response = requests.get(url, parameters, verify=verify)\n    timer.report(report_string.format(status=\"request\"))\n\n    # parse the response\n    if response.ok:\n        pi_time_series = response.json()\n        logger.debug(response.url)\n        time_series_set = TimeSeriesSet.from_pi_time_series(pi_time_series)\n        timer.report(report_string.format(status=\"parsed\"))\n        if time_series_set.empty:\n            logger.debug(f\"FEWS WebService request passing empty set: {response.url}\")\n    else:\n        logger.error(f\"FEWS WebService request {response.url} responds {response.text}\")\n        time_series_set = TimeSeriesSet()\n\n    return time_series_set\n</code></pre>"},{"location":"reference/wrappers/#src.fewspy.wrappers.get_time_series_async.get_time_series_async","title":"<code>get_time_series_async(url, filter_id, location_ids=None, parameter_ids=None, qualifier_ids=None, start_time=None, end_time=None, thinning=None, document_format='PI_JSON', omit_missing=True, verify=False, logger=LOGGER)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>url Delft-FEWS PI REST WebService.</p> required <code>E.g.</code> <code>http</code> <p>//localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers</p> required <code>filter_id</code> <code>str</code> <p>the FEWS id of the filter to pass as request parameter</p> required <code>location_ids</code> <code>list</code> <p>list with FEWS location ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>parameter_ids</code> <code>list</code> <p>list with FEWS parameter ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>qualifier_ids</code> <code>list</code> <p>list with FEWS qualifier ids to extract timeseries from. Defaults to None.</p> <code>None</code> <code>start_time</code> <code>datetime</code> <p>datetime-object with start datetime to use in request. Defaults to None.</p> <code>None</code> <code>end_time</code> <code>datetime</code> <p>datetime-object with end datetime to use in request. Defaults to None.</p> <code>None</code> <code>thinning</code> <code>int</code> <p>integer value for thinning parameter to use in request. Defaults to None.</p> <code>None</code> <code>document_format</code> <code>str</code> <p>request document format to return. Defaults to PI_JSON.</p> <code>'PI_JSON'</code> <code>omit_missing</code> <code>bool</code> <p>if True, no missings values will be returned. Defaults to True</p> <code>True</code> <code>verify</code> <code>bool</code> <p>passed to requests.get verify parameter.</p> <code>False</code> <code>logger</code> <code>Logger</code> <p>Logger to pass logging to. By</p> <code>LOGGER</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Pandas dataframe with index \"id\" and columns</p> <code>DataFrame</code> <p>\"name\" and \"group_id\".</p> Source code in <code>src\\fewspy\\wrappers\\get_time_series_async.py</code> <pre><code>def get_time_series_async(\n    url: str,\n    filter_id: str,\n    location_ids: Union[str, List[str]] = None,\n    parameter_ids: Union[str, List[str]] = None,\n    qualifier_ids: Union[str, List[str]] = None,\n    start_time: datetime = None,\n    end_time: datetime = None,\n    thinning: int = None,\n    document_format: str = \"PI_JSON\",\n    omit_missing: bool = True,\n    verify: bool = False,\n    logger=LOGGER,\n) -&gt; pd.DataFrame:\n    \"\"\"\n\n    Args:\n        url (str): url Delft-FEWS PI REST WebService.\n        E.g. http://localhost:8080/FewsWebServices/rest/fewspiservice/v1/qualifiers\n        filter_id (str): the FEWS id of the filter to pass as request parameter\n        location_ids (list): list with FEWS location ids to extract timeseries from. Defaults to None.\n        parameter_ids (list): list with FEWS parameter ids to extract timeseries from. Defaults to None.\n        qualifier_ids (list): list with FEWS qualifier ids to extract timeseries from. Defaults to None.\n        start_time (datetime.datetime): datetime-object with start datetime to use in request. Defaults to None.\n        end_time (datetime.datetime): datetime-object with end datetime to use in request. Defaults to None.\n        thinning (int): integer value for thinning parameter to use in request. Defaults to None.\n        document_format (str): request document format to return. Defaults to PI_JSON.\n        omit_missing (bool): if True, no missings values will be returned. Defaults to True\n        verify (bool, optional): passed to requests.get verify parameter.\n        Defaults to False.\n        logger (logging.Logger, optional): Logger to pass logging to. By\n        default, a logger will ge created.\n\n    Returns:\n        df (pandas.DataFrame): Pandas dataframe with index \"id\" and columns\n        \"name\" and \"group_id\".\n\n    \"\"\"\n    parameters = parameters_to_fews(locals(), bool_to_string=True)\n\n    def _get_loop():\n        try:\n            loop = asyncio.get_event_loop()\n        except RuntimeError:\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n        finally:\n            loop.set_debug(True)\n            return loop\n\n    async def get_timeseries_async(location_id, parameter_id, qualifier_id, session):\n        \"\"\"Get timerseries using FEWS (asynchronously)\"\"\"\n        parameters[\"locationIds\"] = [location_id]\n        parameters[\"parameterIds\"] = [parameter_id]\n        if qualifier_id is not None:\n            parameters[\"qualifierIds\"] = qualifier_id\n        try:\n            response = await session.request(\n                method=\"GET\", url=url, params=parameters, verify_ssl=verify\n            )\n            response.raise_for_status()\n        except Exception as err:\n            logger.error(\n                f\"An error ocurred: {err} while executing url {url} with parameters {parameters}\"\n            )\n            response = None\n        response_json = await response.json()\n        return response_json\n\n    async def run_program(location_id, parameter_id, qualifier_id, session):\n        \"\"\"Wrapper for running program in an asynchronous manner\"\"\"\n        try:\n            response = await get_timeseries_async(\n                location_id, parameter_id, qualifier_id, session\n            )\n        except Exception as err:\n            logger.error(f\"Exception occured: {err}\")\n            response = None\n            pass\n        return response\n\n    async def asynciee():\n        async with aiohttp.ClientSession(loop=loop) as session:\n            args = [\n                (location_id, parameter_id)\n                for location_id in location_ids\n                for parameter_id in parameter_ids\n            ]\n            if qualifier_ids is None:\n                args = [(*i, None) for i in args]\n            else:\n                args = [\n                    (*i, qualifier_id) for i in args for qualifier_id in qualifier_ids\n                ]\n            fetch_all = [run_program(*i, session) for i in args]\n            result_async = await asyncio.gather(*fetch_all)\n            return result_async\n\n    if __name__ == \"fewspy.wrappers.get_time_series_async\":\n        loop = _get_loop()\n        result_async = loop.run_until_complete(asynciee())\n        time_series_set = __result_async_to_time_series_set(result_async)\n    return time_series_set\n</code></pre>"},{"location":"tutorials/installation_tutorial/","title":"Fewspy installation tutorial","text":"<p>Fewspy can be installed with pip in any environment with the following Python-packages properly installed: Requests, Aiohttp, Pandas and Geopandas. If you don\u2019t have such an environment, we recommend going through the following steps:</p> <ol> <li> <p>Download anaconda via: Anaconda</p> </li> <li> <p>Go to the environmen.yml file and click on <code>Raw</code>, see the red line in the figure below.  </p> </li> <li> <p>Right mouse click and then click on <code>Save as</code> and choose a map on your computer where you want to save this file.  </p> </li> <li> <p>Via explorer;      Go to the map you saved the environment.yml     Type <code>cmd</code> in your address bar and this will open the command prompt, see the example below:   </p> </li> <li> <p>Type in your command prompt: <code>conda env create -f environment.yml</code>, see      figure below: </p> </li> <li> <p>If all the modules are properly installed, your environment is created and      you are ready to use Fewspy! You can use Fewspy by activating your environment:    <code>conda activate bokeh</code> </p> </li> </ol>"}]}